
#include "ufu.h"
#include "ufu.p"

void ufu_read_users(struct s_env *env) {

  int c;
  char *line1,*line2,*line3,*line4,*line5;
  struct s_usr *u,*tmp_u;
  FILE *fp;

  if((fp=fopen(UFU_USR_FILE,"r"))!=NULL) {

    sprintf(env->msg,"Scanning users (%s)",UFU_USR_FILE);
    ufu_log(env);

    line1=ufu_alloc_string(env,256);
    line2=ufu_alloc_string(env,256);
    line3=ufu_alloc_string(env,256);
    line4=ufu_alloc_string(env,256);
    line5=ufu_alloc_string(env,256);

    u=NULL;
    tmp_u=NULL;

    c=0;

    while(fgets(line1,256,fp)!=NULL) {

      c++;

      tmp_u=u;
      u=ufu_alloc_usr(env);

      line2=strtok(line1,":");
      line3=strtok(NULL,":");
      line4=strtok(NULL,":");
      line5=strtok(NULL,":");

      strcpy(u->uname,line2);
      u->uid=atoi(line4);
      u->gid=atoi(line5);

      if(env->debug) {
        sprintf(env->msg,"Found user \"%s\" (uid %d,gid %d)",u->uname,u->uid,u->gid);
      }

      if(tmp_u!=NULL) {
        tmp_u->next=u;
        u->prev=tmp_u;
        tmp_u=u;
      }
      else {
        env->ufirst=u;
        u->prev=NULL;
        u->next=NULL;
      }

    }

    fclose(fp);

    sprintf(env->msg,"Read %d users.",c);
    ufu_log(env);

    ufu_free_string(env,line1);
    // ufu_free_string(env,line2);
    // ufu_free_string(env,line3);
    // ufu_free_string(env,line4);
    // ufu_free_string(env,line5);

  }
  else {

    sprintf(env->msg,"Unable to open file %s!",UFU_USR_FILE);
    ufu_log(env);

    exit(1);

  }

}

void ufu_read_groups(struct s_env *env) {

  int c;
  char *line1,*line2,*line3,*line4;
  struct s_grp *g,*tmp_g;
  FILE *fp;

  if((fp=fopen(UFU_GRP_FILE,"r"))!=NULL) {

    sprintf(env->msg,"Scanning groups (%s)",UFU_GRP_FILE);
    ufu_log(env);

    line1=ufu_alloc_string(env,256);
    line2=ufu_alloc_string(env,256);
    line3=ufu_alloc_string(env,256);
    line4=ufu_alloc_string(env,256);

    g=NULL;
    tmp_g=NULL;

    c=0;

    while(fgets(line1,256,fp)!=NULL) {

      c++;

      tmp_g=g;
      g=ufu_alloc_grp(env);

      line2=strtok(line1,":");
      line3=strtok(NULL,":");
      line4=strtok(NULL,":");

      strcpy(g->gname,line2);
      if(line3[0]=='x')
        g->gid=atoi(line4);
      else
        g->gid=atoi(line3);

      if(env->debug) {
        sprintf(env->msg,"Found group \"%s\" (gid %d)",g->gname,g->gid);
      }

      if(tmp_g!=NULL) {
        tmp_g->next=g;
        g->prev=tmp_g;
        tmp_g=g;
      }
      else {
        env->gfirst=g;
        g->prev=NULL;
        g->next=NULL;
      }

    }

    fclose(fp);

    sprintf(env->msg,"Read %d groups.",c);
    ufu_log(env);

    ufu_free_string(env,line1);
    // ufu_free_string(env,line2);
    // ufu_free_string(env,line3);
    // ufu_free_string(env,line4);

  }
  else {

    sprintf(env->msg,"Unable to open file %s!",UFU_GRP_FILE);
    ufu_log(env);

    exit(1);

  }

}

void ufu_free_users(struct s_env *env) {

  int c;
  struct s_usr *u,*tmp_u;

  sprintf(env->msg," Releasing users");
  ufu_log(env);

  c=0;

  u=env->ufirst;

  while(u!=NULL) {

    tmp_u=u->next;

    c++;

    if(env->debug) {
      sprintf(env->msg,"  Releasing user \"%s\" (uid %d,gid %d)",u->uname,u->uid,u->gid);
    }

    ufu_free_usr(env,u);
    u=tmp_u;

  }

  env->ufirst=NULL;

  sprintf(env->msg," Released %d users.",c);
  ufu_log(env);

}

void ufu_free_groups(struct s_env *env) {

  int c;
  struct s_grp *g,*tmp_g;

  sprintf(env->msg," Releasing groups");
  ufu_log(env);

  c=0;

  g=env->gfirst;

  while(g!=NULL) {

    tmp_g=g->next;

    c++;

    if(env->debug) {
      sprintf(env->msg,"  Releasing group \"%s\" (gid %d)",g->gname,g->gid);
    }

    ufu_free_grp(env,g);
    g=tmp_g;

  }

  env->gfirst=NULL;

  sprintf(env->msg," Released %d groups.",c);
  ufu_log(env);

}

char *ufu_search_user(struct s_env *env,int uid) {

  struct s_usr *u;

  u=env->ufirst;
  while(u!=NULL) {
    if(uid==u->uid) {
      if(env->debug) {
        sprintf(env->msg,"Found username \"%s\" for uid %d.",u->uname,uid);
      }
      return(u->uname);
    }
    u=u->next;
  }

  sprintf(env->msg," No match for uid %d!",uid);
  ufu_log(env);

  return(NULL);

}

int ufu_search_user_gid(struct s_env *env,int uid) {

  struct s_usr *u;

  u=env->ufirst;
  while(u!=NULL) {
    if(uid==u->uid) {
      if(env->debug) {
        sprintf(env->msg,"Found gid %d for uid %d.",u->gid,uid);
      }
      return(u->gid);
    }
    u=u->next;
  }

  sprintf(env->msg," No match for gid %d!",u->gid);
  ufu_log(env);

  return(-1);

}

char *ufu_search_group(struct s_env *env,int gid) {

  struct s_grp *g;

  g=env->gfirst;
  while(g!=NULL) {
    if(gid==g->gid) {
      if(env->debug) {
        sprintf(env->msg,"Found groupname \"%s\" for gid %d.",g->gname,gid);
      }
      return(g->gname);
    }
    g=g->next;
  }

  sprintf(env->msg," No match for gid %d!",gid);
  ufu_log(env);

  return(NULL);

}

int ufu_search_uid(struct s_env *env,char *uname) {

  struct s_usr *u;

  u=env->ufirst;
  while(u!=NULL) {
    if(strcmp(uname,u->uname)==0) {
      if(env->debug) {
        sprintf(env->msg,"Found uid %d for username \"%s\".",u->uid,uname);
      }
      return(u->uid);
    }
    u=u->next;
  }

  sprintf(env->msg," No match for username \"%s\"!",uname);
  ufu_log(env);

  return(-1);

}

int ufu_search_gid(struct s_env *env,char *gname) {

  struct s_grp *g;

  g=env->gfirst;
  while(g!=NULL) {
    if(strcmp(gname,g->gname)==0) {
      if(env->debug) {
        sprintf(env->msg,"Found gid %d for groupname \"%s\".",g->gid,gname);
      }
      return(g->gid);
    }
    g=g->next;
  }

  sprintf(env->msg," No match for groupname \"%s\"!",gname);
  ufu_log(env);

  return(-1);

}
